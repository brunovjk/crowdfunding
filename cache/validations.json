{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "106b74b2fbc10b6d1e339d977d3d1f721f770dbda0a57def3fa33ece57405a41",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV1.sol:CrowdFundingV1": {
        "src": "contracts\\CrowdFundingV1.sol:17",
        "version": {
          "withMetadata": "d575d2e43c4ee442780f05d6224b5fb9cac7e3d6337e975da5a684810fa8c23d",
          "withoutMetadata": "4cff6b9266620d9c36049b8e4874350148b70f3f54440857abe3b5614bbd7e69",
          "linkedWithoutMetadata": "4cff6b9266620d9c36049b8e4874350148b70f3f54440857abe3b5614bbd7e69"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(uint256)",
          "launch(uint256,address,uint256,uint256)",
          "cancel(uint256)",
          "pledge(uint256,uint256)",
          "unPledge(uint256,uint256)",
          "claim(uint256)",
          "refund(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "count",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:28"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:29"
            },
            {
              "label": "campaigns",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Campaign)494_storage)",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:30"
            },
            {
              "label": "pledgedAmount",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Campaign)494_storage)": {
              "label": "mapping(uint256 => struct CrowdFundingV1.Campaign)",
              "numberOfBytes": "32"
            },
            "t_struct(Campaign)494_storage": {
              "label": "struct CrowdFundingV1.Campaign",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "goal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pledged",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "endAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "claimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV1.sol:IERC20": {
        "src": "contracts\\CrowdFundingV1.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV2.sol:CrowdFundingV2": {
        "src": "contracts\\CrowdFundingV2.sol:17",
        "version": {
          "withMetadata": "efe812995c11c8328baa76cdc1cae6e88678d7b5475072a7d212c6a9474e80f7",
          "withoutMetadata": "100d78a354b03d6de58f2d9638e6b59279766c03380cfd8fb10b3ffe3e35cdb0",
          "linkedWithoutMetadata": "100d78a354b03d6de58f2d9638e6b59279766c03380cfd8fb10b3ffe3e35cdb0"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(uint256)",
          "setMaxDuration(uint256)",
          "launch(uint256,address,uint256,uint256)",
          "cancel(uint256)",
          "pledge(uint256,uint256)",
          "unPledge(uint256,uint256)",
          "claim(uint256)",
          "refund(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "count",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:28"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:29"
            },
            {
              "label": "campaigns",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Campaign)1001_storage)",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:30"
            },
            {
              "label": "pledgedAmount",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Campaign)1001_storage)": {
              "label": "mapping(uint256 => struct CrowdFundingV2.Campaign)",
              "numberOfBytes": "32"
            },
            "t_struct(Campaign)1001_storage": {
              "label": "struct CrowdFundingV2.Campaign",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "goal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pledged",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "endAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "claimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV2.sol:IERC20": {
        "src": "contracts\\CrowdFundingV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "106b74b2fbc10b6d1e339d977d3d1f721f770dbda0a57def3fa33ece57405a41",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "75cc4073cd0ea904c848b2193e0559bb86ff616e81b7a71d1ef0d1a1bd70aabc",
          "withoutMetadata": "7a4b8526f9f3098ae88cbb0401a58cc50d73e8a24aa61e1e06d1cc8c626e7400",
          "linkedWithoutMetadata": "7a4b8526f9f3098ae88cbb0401a58cc50d73e8a24aa61e1e06d1cc8c626e7400"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)1665_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)1665_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)1665_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "7d01180486efa7032993ba43145e54bb3a49de93a7aa697697fccba224b1be23",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:11",
        "version": {
          "withMetadata": "858748f602e56e41ed0e06ba6a8769c84c9221e13111a82d147af88c350e50c2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\ECDSA.sol:14",
        "version": {
          "withMetadata": "7bb8483ca9c847ae3e99c4a98e9227f0fb44aa7ff20c337ce358b475b300481d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "2a6c0536e16fb8097a3d519cdbc47c43bd26c8ca9b67268e4503bd121708173d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV1.sol:CrowdFundingV1": {
        "src": "contracts\\CrowdFundingV1.sol:18",
        "version": {
          "withMetadata": "9d4cea6906137e043c5d08b26497b6de9013c0de0cb1b8c6d0b666e793597a04",
          "withoutMetadata": "7f13d4c58dd4f21e5134829ee7b1f5fe3bd1a0a0238a97a134f319ee948bcaaf",
          "linkedWithoutMetadata": "7f13d4c58dd4f21e5134829ee7b1f5fe3bd1a0a0238a97a134f319ee948bcaaf"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(uint256)",
          "launch(uint256,address,uint256,uint256)",
          "cancel(uint256)",
          "pledge(uint256,uint256)",
          "unPledge(uint256,uint256)",
          "claim(uint256)",
          "refund(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "count",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:29"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "102",
              "type": "t_uint256",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:30"
            },
            {
              "label": "campaigns",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_struct(Campaign)3333_storage)",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:31"
            },
            {
              "label": "pledgedAmount",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "CrowdFundingV1",
              "src": "contracts\\CrowdFundingV1.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Campaign)3333_storage)": {
              "label": "mapping(uint256 => struct CrowdFundingV1.Campaign)",
              "numberOfBytes": "32"
            },
            "t_struct(Campaign)3333_storage": {
              "label": "struct CrowdFundingV1.Campaign",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "goal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pledged",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "endAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "claimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV1.sol:IERC20": {
        "src": "contracts\\CrowdFundingV1.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV2.sol:CrowdFundingV2": {
        "src": "contracts\\CrowdFundingV2.sol:18",
        "version": {
          "withMetadata": "67126e8d8ba3dbbcdb86a941747f295e2bfb7fb9e6657d4c1bfbda83253e9388",
          "withoutMetadata": "f0411f1b64b7519739743867f9d86362f55eb2468e6056b261e48c792062e18c",
          "linkedWithoutMetadata": "f0411f1b64b7519739743867f9d86362f55eb2468e6056b261e48c792062e18c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(uint256)",
          "setMaxDuration(uint256)",
          "launch(uint256,address,uint256,uint256)",
          "cancel(uint256)",
          "pledge(uint256,uint256)",
          "unPledge(uint256,uint256)",
          "claim(uint256)",
          "refund(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "count",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:29"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "102",
              "type": "t_uint256",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:30"
            },
            {
              "label": "campaigns",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_struct(Campaign)3843_storage)",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:31"
            },
            {
              "label": "pledgedAmount",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "CrowdFundingV2",
              "src": "contracts\\CrowdFundingV2.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Campaign)3843_storage)": {
              "label": "mapping(uint256 => struct CrowdFundingV2.Campaign)",
              "numberOfBytes": "32"
            },
            "t_struct(Campaign)3843_storage": {
              "label": "struct CrowdFundingV2.Campaign",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "goal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pledged",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "endAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "claimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/CrowdFundingV2.sol:IERC20": {
        "src": "contracts\\CrowdFundingV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/TokenERC20.sol:TokenERC20": {
        "src": "contracts\\TokenERC20.sol:8",
        "version": {
          "withMetadata": "df6ff2277a15c754b3e8b2c3fce1fdc6d7bcd302961d47bcd6f1091d4b5f7557",
          "withoutMetadata": "88f41dc76ee31e2c9616c0f4debc5ddd2e7fe1bc361d5935ca5136f78f13315f",
          "linkedWithoutMetadata": "88f41dc76ee31e2c9616c0f4debc5ddd2e7fe1bc361d5935ca5136f78f13315f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenERC20",
            "src": "contracts\\TokenERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Counter)1665_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "7",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)1665_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)1665_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      }
    }
  ]
}